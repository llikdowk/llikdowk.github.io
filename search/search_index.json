{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Hi all! I'm llikdowk and I've been coding professionally for unreal for quite a long time now. Not so long ago I decided to go indie though, and now I'm not only coding but also designing &amp; responsible of the tech-art side of the games we're making as SelkieHarbour.</p> <p>So, as I develop new features I tend to forget the tricky bits of the ones I've already developed so I decided to build this page so:</p> <ol> <li>I stop wasting my time</li> <li>You can learn too if for some reason you found this in your journey. I hope you find it interesting and/or helpful.</li> </ol> <p>I hope it's going to be as useful to you as it's going to be for me.</p> <p>I'm learning on the go</p> <p>This page is going to be quite rough for a while so bear with me until I figure things out.</p> <p></p> <p>Have a nice day! \ud83e\udd19</p>"},{"location":"code/","title":"CODE","text":""},{"location":"code/#code","title":"CODE","text":"<p>Mostly C++ magic</p>"},{"location":"code/common-ui/","title":"CommonUI","text":""},{"location":"code/common-ui/#commonui","title":"CommonUI","text":"<p>Note</p> <p>All the issues mentioned here have been found in UE5.1. They may have been solved in future engine versions.</p> <p>CommonUI is a cool plugin. At least when it works. And when it doesn't, at least is better than what we had before in UE4 without it.</p> <p>It's common for new features to have bugs, so it's ok. I've found that the biggest issues I've come across are related with the action routing.</p>"},{"location":"code/common-ui/#commonboundactionbar-or-the-trap-thats-wasted-many-hours-of-my-time-before-ditching-it","title":"\"CommonBoundActionBar\" or the trap that's wasted many hours of my time before ditching it","text":"<p>Beware you oh mortal from this eternal punishment! Get away of this (as of unreal 5.1 at least) if you don't want to perish. Here's the official documentation</p> <p>This is not great. For two reasons:</p> <ol> <li>Doesn't refresh if the game is paused (and it's quite likely that some UI screens that use this bar is going to be part of a menu that's gonna pause the game). The workarounds they offer don't make much sense.</li> <li>Uses different kind of widgets for buttons. Meaning that if you want to have a consistent looking for your buttons for pc, you are going to be forced to duplicate logic &amp; visuals. Not ideal.</li> </ol> <p>I've decided to use a simple collapsable button configuration for my menus as it's not a feature I really need. Simpler &amp; without bugs.</p>"},{"location":"code/common-ui/#a-tricky-common-ui-input-settings-fgameplaytag-discovery","title":"A tricky \"Common UI Input Settings\" &amp; \"FGameplayTag\" discovery","text":"<p>I use a custom structure that holds all the gameplay tags I need so I can access them from anywhere in the codebase. However I noticed that the Input Actions configuration was disappearing every time I closed the editor. Turns out that any tags defined through this structure that I had set in the project settigs weren't loading at the right time, so the engine wasn't populating them.</p> <p>The solution is to declare them in any file as:</p> <p><code>UE_DEFINE_GAMEPLAY_TAG(TAG_UI_ACTION_ESCAPE, \"UI.Action.Escape\");</code></p> <p>I'm not a huge fan of these definitions as they tend to scatter all the tags around but as it's a especial case I don't mind it as much.</p>"},{"location":"code/render-umg-in-texture/","title":"Paragraph 1","text":""},{"location":"code/render-umg-in-texture/#paragraph-1","title":"Paragraph 1","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Odio euismod lacinia at quis risus sed vulputate. Pharetra et ultrices neque ornare aenean euismod elementum. Fermentum odio eu feugiat pretium nibh ipsum consequat nisl vel. Eu volutpat odio facilisis mauris sit. In nisl nisi scelerisque eu ultrices vitae. Arcu risus quis varius quam quisque. Egestas purus viverra accumsan in nisl. Ante metus dictum at tempor commodo ullamcorper. Viverra mauris in aliquam sem fringilla ut morbi. Magna sit amet purus gravida quis blandit. Quisque sagittis purus sit amet volutpat.</p>"},{"location":"code/render-umg-in-texture/#paragraph-2","title":"Paragraph 2","text":"<p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Ac ut consequat semper viverra. Nunc faucibus a pellentesque sit amet porttitor eget dolor. Ut tristique et egestas quis ipsum. Rutrum tellus pellentesque eu tincidunt tortor aliquam nulla facilisi. Purus gravida quis blandit turpis cursus. Netus et malesuada fames ac turpis egestas integer. Id faucibus nisl tincidunt eget nullam. Dolor sit amet consectetur adipiscing. Morbi tristique senectus et netus et malesuada fames ac turpis. Risus nec feugiat in fermentum posuere. Dolor sit amet consectetur adipiscing elit pellentesque habitant. Habitasse platea dictumst vestibulum rhoncus est.</p>"},{"location":"code/render-umg-in-texture/#paragraph-3","title":"Paragraph 3","text":"<p>Adipiscing diam donec adipiscing tristique. Gravida dictum fusce ut placerat orci nulla pellentesque dignissim enim. Arcu dui vivamus arcu felis bibendum ut tristique et. Ut porttitor leo a diam sollicitudin tempor id eu. Eget velit aliquet sagittis id consectetur purus ut faucibus. Id faucibus nisl tincidunt eget nullam non. Faucibus pulvinar elementum integer enim neque volutpat. Vitae purus faucibus ornare suspendisse sed nisi lacus sed viverra. Sed elementum tempus egestas sed sed risus pretium quam vulputate. Orci ac auctor augue mauris augue neque gravida. Consectetur libero id faucibus nisl. Ullamcorper velit sed ullamcorper morbi tincidunt ornare massa eget. Non quam lacus suspendisse faucibus interdum posuere lorem ipsum dolor. Suscipit adipiscing bibendum est ultricies. Sed velit dignissim sodales ut eu sem integer vitae. Egestas tellus rutrum tellus pellentesque eu tincidunt tortor. Sit amet consectetur adipiscing elit ut. Massa eget egestas purus viverra accumsan in. Habitant morbi tristique senectus et netus.</p>"},{"location":"code/render-umg-in-texture/#paragraph-1b","title":"Paragraph 1b","text":"<p>Bibendum neque egestas congue quisque. Aenean et tortor at risus. A diam sollicitudin tempor id. Arcu dui vivamus arcu felis bibendum. Neque gravida in fermentum et sollicitudin ac. Blandit libero volutpat sed cras ornare arcu. Libero volutpat sed cras ornare arcu dui vivamus. Facilisi morbi tempus iaculis urna id volutpat lacus laoreet non. Tincidunt vitae semper quis lectus nulla at volutpat diam. Nulla malesuada pellentesque elit eget gravida. Cursus mattis molestie a iaculis at erat pellentesque adipiscing. Nunc sed augue lacus viverra vitae congue eu. Pulvinar etiam non quam lacus. Semper feugiat nibh sed pulvinar proin. Ultrices sagittis orci a scelerisque purus semper. Lorem donec massa sapien faucibus et molestie ac. Nunc aliquet bibendum enim facilisis gravida neque convallis a. Elit at imperdiet dui accumsan sit. Ullamcorper dignissim cras tincidunt lobortis feugiat. Nisl vel pretium lectus quam id.</p>"},{"location":"code/render-umg-in-texture/#paragraph-2b","title":"Paragraph 2b","text":"<p>Sit amet consectetur adipiscing elit. Pellentesque elit ullamcorper dignissim cras tincidunt lobortis feugiat. Urna cursus eget nunc scelerisque viverra mauris in aliquam sem. Ut venenatis tellus in metus vulputate eu scelerisque. Venenatis tellus in metus vulputate eu scelerisque felis imperdiet proin. Sed nisi lacus sed viverra tellus in hac habitasse platea. Orci dapibus ultrices in iaculis nunc sed augue. Ipsum dolor sit amet consectetur adipiscing elit ut aliquam. Ante in nibh mauris cursus mattis molestie a iaculis at. Non blandit massa enim nec dui nunc. Vitae semper quis lectus nulla at volutpat diam ut venenatis. Ut morbi tincidunt augue interdum velit. Eu facilisis sed odio morbi quis.</p>"},{"location":"code/unpublished/","title":"Unpublished","text":""},{"location":"code/unpublished/#ui-buttons-triggering-input-actions","title":"UI Buttons &amp; Triggering input actions","text":"<p>I've noticed that if I put a <code>CommonButton</code> on a <code>CommonActivatableWidget</code>, I assign them a <code>TriggeringInputAction</code> and I use them to close the widget, when I open it again their actions no longer work: these actions work only once.</p> <p>The workaround I found is to disregard these <code>TriggeringInputAction</code> completely and handling them in the activatable widget instead. Basically, I'm connecting the buttons OnClick &amp; different actions to the same method, so they behave the same. </p>"},{"location":"code/uproperty-attributes/","title":"UProperty Attributes","text":""},{"location":"code/uproperty-attributes/#uproperty-attributes","title":"UPROPERTY attributes","text":""},{"location":"code/uproperty-attributes/#meta-attributes","title":"Meta attributes","text":""},{"location":"code/uproperty-attributes/#rowtype","title":"RowType","text":"<p>This limites the scope of the possible selectable rows for a <code>FDataTableRowHandle</code> type.</p> <p>Example: </p> <pre><code>UPROPERTY(EditDefaultsOnly, meta=(RowType = \"/Script/CommonUI.CommonInputActionDataBase\"))\nFDataTableRowHandle ApplyInputActionData;\n</code></pre>"},{"location":"design/","title":"Index","text":"<p>design index</p>"},{"location":"techart/","title":"Tech Art","text":""},{"location":"techart/#tech-art","title":"Tech Art","text":"<p>Shaders are cool until they stop being cool and they turn into a nightmare.</p> <p>In here you'll find all kind of useful information that I've found crawling the web for a solution to my problems.</p>"},{"location":"techart/cool-commands/","title":"Cool Commands","text":""},{"location":"techart/cool-commands/#performance","title":"Performance","text":"Command Description <code>r.SeparateTranslucencyScreenPercentage</code> Dynamically reduces the resolution based on performance"},{"location":"techart/shadows/","title":"Shadows","text":""},{"location":"techart/shadows/#shadows","title":"Shadows","text":""},{"location":"techart/shadows/#virtual-shadows","title":"Virtual shadows","text":"<p>I noticed they were enabled by default in unreal engine 5.1. </p> <p></p> <p>They are good for smooth shadowing but I'm using a celshading postprocess and they were causing weird jagged glitches. Change them by selecting the <code>shadow maps</code> option in the project settings (by default will be set <code>virtual shadow maps (Beta)</code>):</p> <pre><code>Project setting \n    -&gt; Engine \n    -&gt; Rendering \n    -&gt; Shadows \n        -&gt; Shadow map method \n            -&gt; shadow maps -&gt; [shadow maps]\n</code></pre>"}]}